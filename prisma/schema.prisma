// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?   // For credentials authentication
    
    // Medical Information
    fullName      String?
    dateOfBirth   DateTime?
    gender        String?
    height        Float?    // in cm
    weight        Float?    // in kg
    bloodType     String?
    allergies     String?   // JSON string of allergies
    medications   String?   // JSON string of current medications
    medicalHistory String?  // JSON string of medical history
    emergencyContact String? // JSON string with name and phone
    phoneNumber   String?
    address       String?
    onboardingCompleted Boolean @default(false)
    
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    appointments  Appointment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Doctor {
    id          String   @id @default(cuid())
    name        String
    specialty   String
    email       String   @unique
    phone       String?
    bio         String?
    image       String?
    isAvailable Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    appointments Appointment[]
    availability DoctorAvailability[]
}

model DoctorAvailability {
    id        String   @id @default(cuid())
    doctorId  String
    dayOfWeek Int      // 0-6 (Sunday to Saturday)
    startTime String   // "09:00"
    endTime   String   // "17:00"
    
    doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    
    @@unique([doctorId, dayOfWeek])
}

model Appointment {
    id          String            @id @default(cuid())
    patientId   String
    doctorId    String
    proposedAt  DateTime
    status      AppointmentStatus @default(PENDING)
    notes       String?
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    
    patient User   @relation(fields: [patientId], references: [id], onDelete: Cascade)
    doctor  Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    
    negotiations AppointmentNegotiation[]
}

model AppointmentNegotiation {
    id            String                    @id @default(cuid())
    appointmentId String
    proposedBy    NegotiationProposedBy
    proposedAt    DateTime
    message       String?
    status        NegotiationStatus        @default(PENDING)
    createdAt     DateTime                 @default(now())
    
    appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

enum AppointmentStatus {
    PENDING
    CONFIRMED
    CANCELLED
    COMPLETED
    NEGOTIATING
}

enum NegotiationProposedBy {
    PATIENT
    DOCTOR
}

enum NegotiationStatus {
    PENDING
    ACCEPTED
    DECLINED
}
